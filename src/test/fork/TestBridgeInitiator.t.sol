pragma solidity ^0.8.19;

import "forge-std/Test.sol";
import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "../../ocean/Ocean.sol";
import "../../adapters/BridgeInitiator.sol";

contract TestBridgeInitiator is Test {
    BridgeInitiator adapter;

    Ocean ocean = Ocean(0x86C45705d3ED8Db4D43328327CF992ff43f3bdb9);
    IERC20 usdc = IERC20(0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913);
    IERC20 aUSDC = IERC20(0x4e65fE4DbA92790696d040ac24Aa414708F5c0AB);
    IERC20 weth = IERC20(0x4200000000000000000000000000000000000006);
    IERC20 usdt = IERC20(0xfde4C96c8593536E31F229EA8f37b2ADa2699bb2);
    address dlnSource = 0xeF4fB24aD0916217251F553c0596F8Edc630EB66;
    address uniswapPrimitive = 0xddAd89685F9DBa6c035D7639F3F71fa762b583C2;
    address aavePrimitive = 0x5be1836B4573f56a0CB3278B038fCec476Fe6b37;
    address wethPrimitive = 0x628Db1c4dC6aEbCB941C92514067Fede478A6fCE;
    address ausdcWhale = 0x12ba33C6B8Ac904b6FD9cb6DFf3FdB86BC19B75A;
    address usdcWhale = 0x9b4Fc9E22b46487F0810eF5dFa230b9f139E5179;
    address wethWhale = 0xD6b72A2898d606DB809600CfBdE7249aAF5Cef3F;
    uint256 fee = 1_000_000_000_000_000;
    uint256 public constant ethOceanId = 0x97a93559a75ccc959fc63520f07017eed6d512f74e4214a7680ec0eefb5db5b4;

    function setUp() public {
        vm.createSelectFork("https://mainnet.base.org");

        adapter = new BridgeInitiator(address(ocean), dlnSource, fee);

        vm.deal(ausdcWhale, 1e18);
        vm.deal(usdcWhale, 1e18);
        vm.deal(wethWhale, 1e18);
    }

    function _calculateOceanId(address tokenAddress, uint256 tokenId) internal pure returns (uint256) {
        return uint256(keccak256(abi.encodePacked(tokenAddress, tokenId)));
    }

    function testBridge_with_single_primitive(bool primitiveToggle) public {
        vm.startPrank(ausdcWhale);

        if (primitiveToggle) {
            address inputToken = address(aUSDC);
            address outputToken = address(usdc);

            // taking decimals into account
            uint256 amount = 4_000_000;
            aUSDC.approve(address(adapter), amount);

            address[] memory primitives = new address[](1);
            primitives[0] = aavePrimitive;

            uint256[] memory ids = new uint256[](2);
            ids[0] = _calculateOceanId(address(aUSDC), 0);
            ids[1] = _calculateOceanId(address(usdc), 0);

            // bridge data maybe incorrect
            bytes memory bridgeData = hex"b930370100000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000018f80dc23dd00000000000000000000000000000000000000000000000000000000000006a0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006c000000000000000000000000000000000000000000000000000000000000006e0000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda0291300000000000000000000000000000000000000000000000000000000002dc6c00000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000029e2b5000000000000000000000000000000000000000000000000000000000000a4b100000000000000000000000000000000000000000000000000000000000001a0000000000000000000000000d1ae7f25ace194df69eef015a37c5eb9ed6b873300000000000000000000000000000000000000000000000000000000000001e00000000000000000000000000000000000000000000000000000000000000220000000000000000000000000000000000000000000000000000000000000024000000000000000000000000000000000000000000000000000000000000005c00000000000000000000000000000000000000000000000000000000000000014ff970a61a04b1ca14834a43f5de4533ebddb5cc80000000000000000000000000000000000000000000000000000000000000000000000000000000000000014a242203cb380f9fdc012b198bca5cafa3aa9416d0000000000000000000000000000000000000000000000000000000000000000000000000000000000000014d1ae7f25ace194df69eef015a37c5eb9ed6b873300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000341010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000d1ae7f25ace194df69eef015a37c5eb9ed6b8733000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000002400000000000000000000000000000000000000000000000000000000000000020000000000000000000000000a242203cb380f9fdc012b198bca5cafa3aa9416d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000184157e440c000000000000000000000000ff970a61a04b1ca14834a43f5de4533ebddb5cc800000000000000000000000082af49447d8a07e3bd95bd0d56f35241523fbab10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d1ae7f25ace194df69eef015a37c5eb9ed6b8733000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000c98675da140b7493448b986019933483400536ce000000000000000000000000000000000000000000000000000000000000000294ba45375f692d30ba350c4ab1f8b86afb2eca05bb25e84db3dc2285ba154922ed6c217ca1350fd3c4c0af9b905b405f99865a7afb017d62eef833801d99148500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000041010100000042c4030000000000000000000000000000000000b5e2290000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
            try adapter.doOceanInteraction{ value: fee }(inputToken, outputToken, bytes32(0), bytes32(0), primitives, ids, bridgeData) { } catch { }
        } else {
            address[] memory primitives = new address[](1);
            primitives[0] = wethPrimitive;

            address inputToken;
            address outputToken = address(weth);

            uint256 amount = 1e17;

            uint256[] memory ids = new uint256[](2);
            ids[0] = ethOceanId;
            ids[1] = _calculateOceanId(address(weth), 0);

            // bridge data maybe incorrect
            bytes memory bridgeData = hex"b930370100000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000018f80dc23dd00000000000000000000000000000000000000000000000000000000000006a0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006c000000000000000000000000000000000000000000000000000000000000006e0000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda0291300000000000000000000000000000000000000000000000000000000002dc6c00000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000029e2b5000000000000000000000000000000000000000000000000000000000000a4b100000000000000000000000000000000000000000000000000000000000001a0000000000000000000000000d1ae7f25ace194df69eef015a37c5eb9ed6b873300000000000000000000000000000000000000000000000000000000000001e00000000000000000000000000000000000000000000000000000000000000220000000000000000000000000000000000000000000000000000000000000024000000000000000000000000000000000000000000000000000000000000005c00000000000000000000000000000000000000000000000000000000000000014ff970a61a04b1ca14834a43f5de4533ebddb5cc80000000000000000000000000000000000000000000000000000000000000000000000000000000000000014a242203cb380f9fdc012b198bca5cafa3aa9416d0000000000000000000000000000000000000000000000000000000000000000000000000000000000000014d1ae7f25ace194df69eef015a37c5eb9ed6b873300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000341010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000d1ae7f25ace194df69eef015a37c5eb9ed6b8733000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000002400000000000000000000000000000000000000000000000000000000000000020000000000000000000000000a242203cb380f9fdc012b198bca5cafa3aa9416d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000184157e440c000000000000000000000000ff970a61a04b1ca14834a43f5de4533ebddb5cc800000000000000000000000082af49447d8a07e3bd95bd0d56f35241523fbab10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d1ae7f25ace194df69eef015a37c5eb9ed6b8733000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000c98675da140b7493448b986019933483400536ce000000000000000000000000000000000000000000000000000000000000000294ba45375f692d30ba350c4ab1f8b86afb2eca05bb25e84db3dc2285ba154922ed6c217ca1350fd3c4c0af9b905b405f99865a7afb017d62eef833801d99148500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000041010100000042c4030000000000000000000000000000000000b5e2290000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
            try adapter.doOceanInteraction{ value: fee + amount }(inputToken, outputToken, bytes32(0), bytes32(0), primitives, ids, bridgeData) { } catch { }
        }
        vm.stopPrank();
    }

    function testBridge_with_multiple_primitives(bool swapToggle, bool nativePoolToggle) public {
        if (swapToggle) {
            vm.startPrank(wethWhale);

            address inputToken = address(weth);
            address outputToken = address(usdt);

            // taking decimals into account
            uint256 amount = 1e18;
            weth.approve(address(adapter), amount);

            address[] memory primitives = new address[](3);
            primitives[0] = uniswapPrimitive;
            primitives[1] = uniswapPrimitive;

            uint256[] memory ids = new uint256[](3);
            ids[0] = _calculateOceanId(address(weth), 0);
            ids[1] = _calculateOceanId(address(usdc), 0);
            ids[2] = _calculateOceanId(address(usdt), 0);

            // bridge data maybe incorrect
            bytes memory bridgeData = hex"b930370100000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000018f80dc23dd00000000000000000000000000000000000000000000000000000000000006a0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006c000000000000000000000000000000000000000000000000000000000000006e0000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda0291300000000000000000000000000000000000000000000000000000000002dc6c00000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000029e2b5000000000000000000000000000000000000000000000000000000000000a4b100000000000000000000000000000000000000000000000000000000000001a0000000000000000000000000d1ae7f25ace194df69eef015a37c5eb9ed6b873300000000000000000000000000000000000000000000000000000000000001e00000000000000000000000000000000000000000000000000000000000000220000000000000000000000000000000000000000000000000000000000000024000000000000000000000000000000000000000000000000000000000000005c00000000000000000000000000000000000000000000000000000000000000014ff970a61a04b1ca14834a43f5de4533ebddb5cc80000000000000000000000000000000000000000000000000000000000000000000000000000000000000014a242203cb380f9fdc012b198bca5cafa3aa9416d0000000000000000000000000000000000000000000000000000000000000000000000000000000000000014d1ae7f25ace194df69eef015a37c5eb9ed6b873300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000341010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000d1ae7f25ace194df69eef015a37c5eb9ed6b8733000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000002400000000000000000000000000000000000000000000000000000000000000020000000000000000000000000a242203cb380f9fdc012b198bca5cafa3aa9416d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000184157e440c000000000000000000000000ff970a61a04b1ca14834a43f5de4533ebddb5cc800000000000000000000000082af49447d8a07e3bd95bd0d56f35241523fbab10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d1ae7f25ace194df69eef015a37c5eb9ed6b8733000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000c98675da140b7493448b986019933483400536ce000000000000000000000000000000000000000000000000000000000000000294ba45375f692d30ba350c4ab1f8b86afb2eca05bb25e84db3dc2285ba154922ed6c217ca1350fd3c4c0af9b905b405f99865a7afb017d62eef833801d99148500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000041010100000042c4030000000000000000000000000000000000b5e2290000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
            try adapter.doOceanInteraction{ value: fee }(inputToken, outputToken, bytes32(0), bytes32(0), primitives, ids, bridgeData) { } catch { }
        } else {
            vm.startPrank(usdcWhale);

            if (nativePoolToggle) {
                address inputToken = address(usdc);
                address outputToken;

                // taking decimals into account
                uint256 amount = 10e7;
                usdc.approve(address(adapter), amount);

                address[] memory primitives = new address[](2);
                primitives[0] = uniswapPrimitive;
                primitives[1] = wethPrimitive;

                uint256[] memory ids = new uint256[](3);
                ids[0] = _calculateOceanId(address(usdc), 0);
                ids[1] = _calculateOceanId(address(weth), 0);
                ids[2] = ethOceanId;

                // bridge data maybe incorrect
                bytes memory bridgeData = hex"b930370100000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000018f80dc23dd00000000000000000000000000000000000000000000000000000000000006a0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006c000000000000000000000000000000000000000000000000000000000000006e0000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda0291300000000000000000000000000000000000000000000000000000000002dc6c00000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000029e2b5000000000000000000000000000000000000000000000000000000000000a4b100000000000000000000000000000000000000000000000000000000000001a0000000000000000000000000d1ae7f25ace194df69eef015a37c5eb9ed6b873300000000000000000000000000000000000000000000000000000000000001e00000000000000000000000000000000000000000000000000000000000000220000000000000000000000000000000000000000000000000000000000000024000000000000000000000000000000000000000000000000000000000000005c00000000000000000000000000000000000000000000000000000000000000014ff970a61a04b1ca14834a43f5de4533ebddb5cc80000000000000000000000000000000000000000000000000000000000000000000000000000000000000014a242203cb380f9fdc012b198bca5cafa3aa9416d0000000000000000000000000000000000000000000000000000000000000000000000000000000000000014d1ae7f25ace194df69eef015a37c5eb9ed6b873300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000341010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000d1ae7f25ace194df69eef015a37c5eb9ed6b8733000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000002400000000000000000000000000000000000000000000000000000000000000020000000000000000000000000a242203cb380f9fdc012b198bca5cafa3aa9416d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000184157e440c000000000000000000000000ff970a61a04b1ca14834a43f5de4533ebddb5cc800000000000000000000000082af49447d8a07e3bd95bd0d56f35241523fbab10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d1ae7f25ace194df69eef015a37c5eb9ed6b8733000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000c98675da140b7493448b986019933483400536ce000000000000000000000000000000000000000000000000000000000000000294ba45375f692d30ba350c4ab1f8b86afb2eca05bb25e84db3dc2285ba154922ed6c217ca1350fd3c4c0af9b905b405f99865a7afb017d62eef833801d99148500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000041010100000042c4030000000000000000000000000000000000b5e2290000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
                try adapter.doOceanInteraction{ value: fee }(inputToken, outputToken, bytes32(0), bytes32(0), primitives, ids, bridgeData) { } catch { }
            } else {
                address inputToken;
                address outputToken = address(weth);

                address[] memory primitives = new address[](3);
                primitives[0] = wethPrimitive;
                primitives[1] = uniswapPrimitive;
                primitives[2] = uniswapPrimitive;

                uint256 amount = 1e17;

                uint256[] memory ids = new uint256[](4);
                ids[0] = ethOceanId;
                ids[1] = _calculateOceanId(address(weth), 0);
                ids[2] = _calculateOceanId(address(usdc), 0);
                ids[3] = _calculateOceanId(address(weth), 0);

                // bridge data maybe incorrect
                bytes memory bridgeData = hex"b930370100000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000018f80dc23dd00000000000000000000000000000000000000000000000000000000000006a0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006c000000000000000000000000000000000000000000000000000000000000006e0000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda0291300000000000000000000000000000000000000000000000000000000002dc6c00000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000029e2b5000000000000000000000000000000000000000000000000000000000000a4b100000000000000000000000000000000000000000000000000000000000001a0000000000000000000000000d1ae7f25ace194df69eef015a37c5eb9ed6b873300000000000000000000000000000000000000000000000000000000000001e00000000000000000000000000000000000000000000000000000000000000220000000000000000000000000000000000000000000000000000000000000024000000000000000000000000000000000000000000000000000000000000005c00000000000000000000000000000000000000000000000000000000000000014ff970a61a04b1ca14834a43f5de4533ebddb5cc80000000000000000000000000000000000000000000000000000000000000000000000000000000000000014a242203cb380f9fdc012b198bca5cafa3aa9416d0000000000000000000000000000000000000000000000000000000000000000000000000000000000000014d1ae7f25ace194df69eef015a37c5eb9ed6b873300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000341010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000d1ae7f25ace194df69eef015a37c5eb9ed6b8733000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000002400000000000000000000000000000000000000000000000000000000000000020000000000000000000000000a242203cb380f9fdc012b198bca5cafa3aa9416d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000184157e440c000000000000000000000000ff970a61a04b1ca14834a43f5de4533ebddb5cc800000000000000000000000082af49447d8a07e3bd95bd0d56f35241523fbab10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d1ae7f25ace194df69eef015a37c5eb9ed6b8733000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000c98675da140b7493448b986019933483400536ce000000000000000000000000000000000000000000000000000000000000000294ba45375f692d30ba350c4ab1f8b86afb2eca05bb25e84db3dc2285ba154922ed6c217ca1350fd3c4c0af9b905b405f99865a7afb017d62eef833801d99148500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000041010100000042c4030000000000000000000000000000000000b5e2290000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
                try adapter.doOceanInteraction{ value: fee + amount }(inputToken, outputToken, bytes32(0), bytes32(0), primitives, ids, bridgeData) { } catch { }
            }
            vm.stopPrank();
        }
    }
}
